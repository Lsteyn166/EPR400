The design of the algorithm used in the simulation works very well to systematically determine the 15 required servo angles from the three input values $(X,Y,R)$ which ultimately represent the speed for the $X$-direction, $Y$-direction and Rotation. What the simulation fails to take into account is the practical time constraints necessary to make a robot work. In simulation the result was just plotted so all the movement could be done instantaneously. In practice however, the servo motors used to control the limbs of the robot need time to adjust to the set position. These servo motors use traditional analogue proportional, integral, derivative (PID) control techniques. The derivative term means that a sudden, large change in setpoint would result in a large current surge as a result of the PID controller trying to get to the setpoint as soon as possible. If all 15 of the servo motors are updated at the same time with a large jump in position, the surge in current required from each individual servo motor would sum to a large surge, possibly causing a brief dip in the system voltage. The solution to this is to not make large changes in setpoint between updates to the servo motors but rather smaller updates more frequently. The exact time between updates will be a function of a how long it takes the floating point arithmetic (FPU) unit of the microcontroller to do all the floating point math required by the IK algorithm once.